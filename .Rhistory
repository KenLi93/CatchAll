other = list(theta_hat = theta_hat,
cutoff = cutoff))
install()
library(CatchAll)
two_geometric_model(apples, cutoff = 50)
three_geometric_model(apples, cutoff = 50)
three_geometric_model(apples, cutoff = 70)
two_geometric_model(apples, cutoff = 50)
three_geometric_model(apples, cutoff = 70)
two_geometric_model(apples, cutoff = 50)
three_geometric_model(apples, cutoff = 70)
two_geometric_model(apples, cutoff = 50)
apples_best_models <- select_best_models(apples)
install()
library(CatchAll)
Poisson_model(apples, cutoff = 20)
geometric_model(apples, cutoff = 20)
two_geometric_model(apples, cutoff = 50)
three_geometric_model(apples, cutoff = 70)
apples_results <- all_parametric_model(apples)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
head(apples_results, 20)
options(warn = 0)
options(warn = -1)
install()
library(CatchAll)
apples_results <- all_parametric_model(apples)
head(apples_results, 20)
apples_best_models <- select_best_models(apples)
library(dplyr)
apples_best_models <- select_best_models(apples)
ii <- input_data$index
input_data <- convert(input_data)
all_results_tib <- all_parametric_model(input_data, parallel = parallel, control = control) %>%
complete.cases()
parallel <- F
all_results_tib <- all_parametric_model(input_data, parallel = parallel, control = control) %>%
complete.cases()
## Model selection, flag indicates how stringent the selection criteria are
flag <- 0
if (sum(all_results_tib$GOF5 > 0.01) > 0) {
if (sum(all_results_tib$GOF0 > 0.01) > 0) {
flag <- 2
} else {
flag <- 1
}
}
all_results_tib
all_results_tib <- all_parametric_model(input_data, parallel = parallel, control = control)
all_results_tib
all_results_tib <- all_parametric_model(input_data, parallel = parallel, control = control) %>%
.[complete.cases(.),]
head(all_results_tib)
flag <- 0
if (sum(all_results_tib$GOF5 > 0.01) > 0) {
if (sum(all_results_tib$GOF0 > 0.01) > 0) {
flag <- 2
} else {
flag <- 1
}
}
if (flag == 0) {
## all models are filtered out.
## In this scenario, we return 4 models with best AICc and GOF5
bestModels <- all_results_tib %>%
group_by(tau) %>%
filter(AICc == min(AICc)) %>%
arrange(desc(GOF5)) %>%
.[1:4,]
output <- tibble(Description = c("Best Model 1", "Best Model 2", "Best Model 3", "Best Model 4")) %>%
bind_cols(bestModels)
} else if (flag == 1) {
## relaxed criteria
## Model 2A is the model with the greatest GOF0
bestModels <- all_results_tib %>%
filter(GOF5 > 0.01) %>%
group_by(tau) %>%
filter(AICc == min(AICc)) %>%
group_by()
bestModel1 <- tibble(Description = "Best Model 1", tau = NA, Model = NA, Est = NA, SE = NA, AICc = NA)
bestModel2A <- bestModels %>%
filter(GOF0 == max(GOF0)) %>%
bind_cols(tibble(Description = c("Best Model 2A")),
.)
bestModel2B <- bestModels %>%
filter(tau == max(tau))%>%
bind_cols(tibble(Description = c("Best Model 2B")),
.)
bestModel2C <- bestModels %>%
filter(tau <= 10) %>%
filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 2C")),
.)
output <- bind_rows(bestModel1, bestModel2A, bestModel2B, bestModel2C)
} else if (flag == 2) {
## We adopt the most stringent criteria
bestModels <- all_results_tib %>%
filter(GOF5 > 0.01) %>%
group_by(tau) %>%
filter(AICc == min(AICc))
bestModel1 <- bestModels %>%
filter(GOF0 > 0.01) %>%
filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 1")),
.)
bestModel2A <- bestModels %>%
filter(GOF0 == max(GOF0)) %>%
bind_cols(tibble(Description = c("Best Model 2A")),
.)
bestModel2B <- bestModels %>%
filter(tau == max(tau))%>%
bind_cols(tibble(Description = c("Best Model 2B")),
.)
bestModel2C <- bestModels %>%
filter(tau <= 10) %>%
filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 2C")),
.)
output <- bind_rows(bestModel1, bestModel2A, bestModel2B, bestModel2C)
}
results <- list(BestModels = output,
flag = flag,
message = switch(as.character(flag),
"0" = "All GOF5 < 0.01: Return Models with smallest AICc and GOF5",
"1" = "All GOF0 < 0.01: Best Model 1 not available",
"2" = "All best parametric models available"))
options(warn = 0)
## all models are filtered out.
## In this scenario, we return 4 models with best AICc and GOF5
bestModels <- all_results_tib %>%
group_by(tau) %>%
filter(AICc == min(AICc)) %>%
arrange(desc(GOF5)) %>%
.[1:4,]
bestModels
## Model selection, flag indicates how stringent the selection criteria are
flag <- 0
if (sum(all_results_tib$GOF5 > 0.01) > 0) {
if (sum(all_results_tib$GOF0 > 0.01) > 0) {
flag <- 2
} else {
flag <- 1
}
}
flag
## relaxed criteria
## Model 2A is the model with the greatest GOF0
bestModels <- all_results_tib %>%
filter(GOF5 > 0.01) %>%
group_by(tau) %>%
filter(AICc == min(AICc)) %>%
group_by()
bestModels
bestModel1 <- tibble(Description = "Best Model 1", tau = NA, Model = NA, Est = NA, SE = NA, AICc = NA)
bestModel1
bestModel2A <- bestModels %>%
filter(GOF0 == max(GOF0)) %>%
bind_cols(tibble(Description = c("Best Model 2A")),
.)
bestModel2A
bestModel2B <- bestModels %>%
filter(tau == max(tau))%>%
bind_cols(tibble(Description = c("Best Model 2B")),
.)
bestModel2B
bestModel2C <- bestModels %>%
filter(tau <= 10) %>%
filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 2C")),
.)
bestModel2C <- bestModels %>%
filter(tau <= 10) %>%
filter(tau == max(tau))
bestModel2C
bestModel2C <- tibble(Description = "Best Model 2C", tau = NA, Model = NA, Est = NA, SE = NA, AICc = NA)
bestModel2C
best_models <- select_best_models(input_data, ...)
best_models <- select_best_models(input_data)
select_best_models <- function(input_data,
parallel = F,
control = list(ncores = ceiling(detectCores()/2))) {
options(warn = -1)
ii <- input_data$index
input_data <- convert(input_data)
all_results_tib <- all_parametric_model(input_data, parallel = parallel, control = control) %>%
.[complete.cases(.),]
## For each cutoff, evaluate all the models
# all_results <- lapply(ii[3:max(length(ii) - 3, 10)], function (tau) {
#   poisson_tau <- Poisson_model(input_data, cutoff = tau)
#   geometric_tau <- geometric_model(input_data, cutoff = tau)
#   two_mixed_geom_tau <- two_geometric_model(input_data, cutoff = tau)
#   three_mixed_geom_tau <- three_geometric_model(input_data, cutoff = tau)
#   tau_tab <- tibble(tau = tau,
#                     Model = c("Poisson", "SingleExp", "TwoMixedExp", "ThreeMixedExp"),
#                     Est = c(poisson_tau$estimate, geometric_tau$estimate, two_mixed_geom_tau$estimate, three_mixed_geom_tau$estimate),
#                     SE = c(poisson_tau$error, geometric_tau$error, two_mixed_geom_tau$error, three_mixed_geom_tau$error),
#                     AICc = c(poisson_tau$AICc, geometric_tau$AICc, two_mixed_geom_tau$AICc, three_mixed_geom_tau$AICc),
#                     GOF0 = c(poisson_tau$GOF0, geometric_tau$GOF0, two_mixed_geom_tau$GOF0, three_mixed_geom_tau$GOF0),
#                     GOF5 = c(poisson_tau$GOF5, geometric_tau$GOF5, two_mixed_geom_tau$GOF5, three_mixed_geom_tau$GOF5))
#
#   tau_tab <- tau_tab[!is.na(tau_tab$Est),]
#   return(tau_tab)
# })
#
# ## combine all the list
# all_results_tib <- all_results[[1]]
#
# for(i in 2:length(all_results)) {
#   all_results_tib <- bind_rows(all_results_tib, all_results[[i]])
# }
#
# all_results_tib <- arrange(all_results_tib, Model, tau)
## Model selection, flag indicates how stringent the selection criteria are
flag <- 0
if (sum(all_results_tib$GOF5 > 0.01) > 0) {
if (sum(all_results_tib$GOF0 > 0.01) > 0) {
flag <- 2
} else {
flag <- 1
}
}
if (flag == 0) {
## all models are filtered out.
## In this scenario, we return 4 models with best AICc and GOF5
bestModels <- all_results_tib %>%
group_by(tau) %>%
filter(AICc == min(AICc)) %>%
arrange(desc(GOF5)) %>%
.[1:4,]
output <- tibble(Description = c("Best Model 1", "Best Model 2", "Best Model 3", "Best Model 4")) %>%
bind_cols(bestModels)
} else if (flag == 1) {
## relaxed criteria
## Model 2A is the model with the greatest GOF0
bestModels <- all_results_tib %>%
filter(GOF5 > 0.01) %>%
group_by(tau) %>%
filter(AICc == min(AICc)) %>%
group_by()
bestModel1 <- tibble(Description = "Best Model 1", tau = NA, Model = NA, Est = NA, SE = NA, AICc = NA)
bestModel2A <- bestModels %>%
filter(GOF0 == max(GOF0)) %>%
bind_cols(tibble(Description = c("Best Model 2A")),
.)
bestModel2B <- bestModels %>%
filter(tau == max(tau))%>%
bind_cols(tibble(Description = c("Best Model 2B")),
.)
if (any(bestModels$tau <= 10)) {
bestModel2C <- bestModels %>%
filter(tau <= 10) %>%
filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 2C")),
.)
} else {
bestModel2C <- tibble(Description = "Best Model 2C", tau = NA, Model = NA, Est = NA, SE = NA, AICc = NA)
}
output <- bind_rows(bestModel1, bestModel2A, bestModel2B, bestModel2C)
} else if (flag == 2) {
## We adopt the most stringent criteria
bestModels <- all_results_tib %>%
filter(GOF5 > 0.01) %>%
group_by(tau) %>%
filter(AICc == min(AICc))
bestModel1 <- bestModels %>%
filter(GOF0 > 0.01) %>%
filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 1")),
.)
bestModel2A <- bestModels %>%
filter(GOF0 == max(GOF0)) %>%
bind_cols(tibble(Description = c("Best Model 2A")),
.)
bestModel2B <- bestModels %>%
filter(tau == max(tau))%>%
bind_cols(tibble(Description = c("Best Model 2B")),
.)
bestModel2C <- bestModels %>%
filter(tau <= 10) %>%
filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 2C")),
.)
output <- bind_rows(bestModel1, bestModel2A, bestModel2B, bestModel2C)
}
results <- list(BestModels = output,
flag = flag,
message = switch(as.character(flag),
"0" = "All GOF5 < 0.01: Return Models with smallest AICc and GOF5",
"1" = "All GOF0 < 0.01: Best Model 1 not available",
"2" = "All best parametric models available"))
options(warn = 0)
return(results)
}
best_models <- select_best_models(input_data)
best_models
bob <- best_models$BestModels %>%
filter(., complete.cases(.))
bob
bob <- best_models$BestModels %>%
filter(., complete.cases(.)) %>%
.[1, ]
bob
bob$Model[1]
bob_model <- switch(bob$Model[1],
"Poisson" = "Poisson_model",
"SingleExp" = "geometric_model",
"TwoMixedExp" = "two_geometric_model",
"ThreeMixedExp" = "three_geometric_model")
bob_model <- switch(as.character(bob$Model[1]),
"Poisson" = "Poisson_model",
"SingleExp" = "geometric_model",
"TwoMixedExp" = "two_geometric_model",
"ThreeMixedExp" = "three_geometric_model")
bob_model
?do
?call
?do.call
bob$tau
bob_alpha <- do.call(bob_model, args = list(input_data = input_data,
cutoff = bob$tau))
bob_alpha
wlrm_transformed(input_data)
wlrm_untransformed
wlrm_untransformed(input_data)
chao1(input_data)
apples_best_models <- select_best_models(apples)
install()
?breakaway::wlrm_transformed
wlrm_transformed(apples)
?kemp
kemp(apples)
chao1_result <- chao1(input_data)
chao1_result
wlrm_result <- wlrm_untransformed(input_data)
logwlrm_result <- wlrm_transformed(input_data)
wlrm_result <- wlrm_untransformed(input_data)
wlrm_result
logwlrm_result
kemp(input_data)
str(chao1_result)
wlrm_result
wlrm_result %>% str
wlrm_result$other$cutoff
tau_tab <- tibble(tau = tau,
Description = c("NonP1", "WLRM", "WLRM"),
tau = c(1, wlrm_result$other$cutoff, logwlrm_result$other$cutoff),
Model = c("Chao1", "UnTrans", "LogTrans"),
Est = c(chao1_result$estimate, wlrm_result$estimate, logwlrm_result$estimate),
SE = c(chao1_result$error, wlrm_result$error, logwlrm_result$error),
AICc = c(NA, NA, NA),
GOF0 = c(NA, NA, NA),
GOF5 = c(NA, NA, NA))
res_tab <- tibble(Description = c("NonP1", "WLRM", "WLRM"),
tau = c(1, wlrm_result$other$cutoff, logwlrm_result$other$cutoff),
Model = c("Chao1", "UnTrans", "LogTrans"),
Est = c(chao1_result$estimate, wlrm_result$estimate, logwlrm_result$estimate),
SE = c(chao1_result$error, wlrm_result$error, logwlrm_result$error),
AICc = c(NA, NA, NA),
GOF0 = c(NA, NA, NA),
GOF5 = c(NA, NA, NA))
res_tab
chao1_result
str(chao1_result)
res_tab <- tibble(Description = c("NonP1", "WLRM", "WLRM"),
tau = c(1, wlrm_result$other$cutoff, logwlrm_result$other$cutoff),
Model = c("Chao1", "UnTrans", "LogTrans"),
Est = c(chao1_result$estimate, wlrm_result$estimate, logwlrm_result$estimate),
SE = c(chao1_result$error, wlrm_result$error, logwlrm_result$error),
AICc = c(NA, NA, NA),
GOF0 = c(NA, NA, NA),
GOF5 = c(NA, NA, NA),
LwrCB = c(chao1_result$ci[1], wlrm_result$ci[1], logwlrm_result$ci[1]),
UprCB = c(chao1_result$ci[2], wlrm_result$ci[2], logwlrm_result$ci[2]))
res_tab
kemp_result <- kemp(input_data)
kemp_result
str(kemp_result)
plot(kemp_result)
kemp
breakaway:::kemp.default
breakaway:::cutoff_wrap()
breakaway:::cutoff_wrap
mydata <- apples
my_data <- apples
res_tab <- tibble(Description = c("NonP1", "WLRM", "WLRM", "KEMP"),
tau = c(1, wlrm_result$other$cutoff, logwlrm_result$other$cutoff, NA),
Model = c("Chao1", "UnTrans", "LogTrans", "Kemp"),
Est = c(chao1_result$estimate, wlrm_result$estimate, logwlrm_result$estimate),
SE = c(chao1_result$error, wlrm_result$error, logwlrm_result$error),
AICc = c(NA, NA, NA),
GOF0 = c(NA, NA, NA),
GOF5 = c(NA, NA, NA),
LwrCB = c(chao1_result$ci[1], wlrm_result$ci[1], logwlrm_result$ci[1]),
UprCB = c(chao1_result$ci[2], wlrm_result$ci[2], logwlrm_result$ci[2]))
iss <- my_data$index
fis <- my_data$frequency
length_fis <- length(fis)
breaks <- which(iss[-1] - iss[-length_fis] > 1)
iss
fis
length_fis
breaks
chao1_result <- try(chao1(input_data), silent = T)
chao1_tab <- tibble(Description = "NonP1", tau = 1, Model = "Chao1", Est = chao1_result$estimate,
SE = chao1_result$error, AICc = NA, GOF0 = NA, GOF5 = NA,
LwrCB = chao1_result$ci[1], UprCB = chao1_result$ci[2])
chao1_tab
wlrm_result <- try(wlrm_untransformed(input_data), silent = T)
if (class(wlrm_result) !="try-error") {
wlrm_tab <- tibble(Description = "WLRM", tau = 1, Model = "UnTrans", Est = wlrm_result$estimate,
SE = wlrm_result$error, AICc = NA, GOF0 = NA, GOF5 = NA,
LwrCB = wlrm_result$ci[1], UprCB = wlrm_result$ci[2])
} else {
wlrm_tab <- tibble(Description = "WLRM", tau = 1, Model = "UnTrans", Est = NA,
SE = NA, AICc = NA, GOF0 = NA, GOF5 = NA,
LwrCB = NA, UprCB = NA)
}
class(wlrm_result)
wlrm_result <- try(wlrm_untransformed(input_data), silent = T)
if (class(wlrm_result)[1] !="try-error") {
wlrm_tab <- tibble(Description = "WLRM", tau = 1, Model = "UnTrans", Est = wlrm_result$estimate,
SE = wlrm_result$error, AICc = NA, GOF0 = NA, GOF5 = NA,
LwrCB = wlrm_result$ci[1], UprCB = wlrm_result$ci[2])
} else {
wlrm_tab <- tibble(Description = "WLRM", tau = 1, Model = "UnTrans", Est = NA,
SE = NA, AICc = NA, GOF0 = NA, GOF5 = NA,
LwrCB = NA, UprCB = NA)
}
wlrm_tab
logwlrm_result <- try(wlrm_transformed(input_data), silent = T)
if (class(logwlrm_result)[1] !="try-error") {
logwlrm_tab <- tibble(Description = "WLRM", tau = 1, Model = "LogTrans", Est = logwlrm_result$estimate,
SE = logwlrm_result$error, AICc = NA, GOF0 = NA, GOF5 = NA,
LwrCB = logwlrm_result$ci[1], UprCB = logwlrm_result$ci[2])
} else {
logwlrm_tab <- tibble(Description = "WLRM", tau = 1, Model = "LogTrans", Est = NA,
SE = NA, AICc = NA, GOF0 = NA, GOF5 = NA,
LwrCB = NA, UprCB = NA)
}
logwlrm_result
logwlrm_tab
kemp_result
kemp_result <- try(kemp(input_data), silent = T)
if (class(kemp_result)[1] !="try-error") {
kemp_tab <- tibble(Description = "KEMP", tau = NA, Model = "Kemp", Est = kemp_result$estimate,
SE = kemp_result$error, AICc = NA, GOF0 = NA, GOF5 = NA,
LwrCB = kemp_result$ci[1], UprCB = kemp_result$ci[2])
} else {
kemp_tab <- tibble(Description = "KEMP", tau = NA, Model = "Kemp", Est = NA,
SE = NA, AICc = NA, GOF0 = NA, GOF5 = NA,
LwrCB = NA, UprCB = NA)
}
kemp_tab
param_tab <- select_best_models(input_data)
param_tab
param_tab <- select_best_models(input_data)
res_tab <- bind_rows(param_tab$BestModels,
chao1_tab,
wlrm_tab,
logwlrm_tab)
res_tab
res_tab <- bind_rows(param_tab$BestModels %>% filter(!is.na(Est)),
chao1_tab,
wlrm_tab,
logwlrm_tab)
res_tab
install()
document()
document()
install()
library(CatchAll)
catch_all(apples)
param_tab <- select_best_models(apples)
param_tab
res_tab <- bind_rows(param_tab$BestModels %>% filter(!is.na(Est)),
chao1_tab,
wlrm_tab,
logwlrm_tab)
return(res_tab)
supressWarnings
?suppressWarnings
suppressWarnings( res_tab <- bind_rows(param_tab$BestModels %>% filter(!is.na(Est)),
chao1_tab,
wlrm_tab,
logwlrm_tab))
res_tab
logwlrm_result$other$cutoff
logwlrm_result$other$cutoff
logwlrm_tab
logwlrm_tab <- tibble(Description = "WLRM", tau = logwlrm_result$other$cutoff, Model = "LogTrans", Est = logwlrm_result$estimate,
SE = logwlrm_result$error, AICc = NA, GOF0 = NA, GOF5 = NA,
LwrCB = logwlrm_result$ci[1], UprCB = logwlrm_result$ci[2])
logwlrm_tab <- tibble(Description = "WLRM", tau = logwlrm_result$other$cutoff, Model = "LogTrans", Est = NA,
SE = NA, AICc = NA, GOF0 = NA, GOF5 = NA,
LwrCB = NA, UprCB = NA)
logwlrm_tab
logwlrm_tab <- tibble(Description = "WLRM", tau = logwlrm_result$other$cutoff, Model = "LogTrans", Est = logwlrm_result$estimate,
SE = logwlrm_result$error, AICc = NA, GOF0 = NA, GOF5 = NA,
LwrCB = logwlrm_result$ci[1], UprCB = logwlrm_result$ci[2])
logwlrm_tab
document()
install()
library(SpadeR)
library(CatchAll)
catch_all(apples)
library(CatchAll)
install()
library(devtools)
install()
install()
install()
update.packages(c("tibble", "dplyr", "rlang"))
