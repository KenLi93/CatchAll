names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
bmm
sum(counts>0)
bmm$model
bmm$est
?geom
Geometric
?rgeom
CC = 500
prob = 0.8
counts <- rgeom(CC, prob)
counts
table(counts)
prob = 0.3
counts <- rgeom(CC, prob)
table(counts)
prob = 0.2
counts <- rgeom(CC, prob)
counts
table(counts)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
bmm
fc_tab
#' @export
all_parametric_model <- function(input_data,
parallel = F,
tau_range = NULL,
control = list(ncores = ceiling(detectCores()/2))) {
options(warn = -1)
ii <- input_data$index
input_data <- convert(input_data)
if (is.null(tau_range)) {
tau_range <- c(3, max(length(ii) - 3, 10))
}
if(parallel == T) {
cl <- makeCluster(control$ncores)
clusterExport(cl, c("input_data", "GOF", "geometric_model", "Poisson_model",
"two_geometric_model", "two_mixed_exp_lld", "two_mixed_exp_init",
"two_mixed_exp_se", "two_mixed_exp_EM", "three_geometric_model",
"three_mixed_exp_lld", "three_mixed_exp_init", "three_mixed_exp_se",
"three_mixed_exp_EM", "ii"))
all_results <- mclapply(tau_range[1]:tau_range[2], function (tau) {
cat("...")
cat(tau)
poisson_tau <- Poisson_model(input_data, cutoff = tau)
geometric_tau <- geometric_model(input_data, cutoff = tau)
two_mixed_geom_tau <- two_geometric_model(input_data, cutoff = tau)
three_mixed_geom_tau <- three_geometric_model(input_data, cutoff = tau)
tau_tab <- data.frame(tau = tau,
Model = c("Poisson", "SingleExp", "TwoMixedExp", "ThreeMixedExp"),
Est = c(poisson_tau$estimate, geometric_tau$estimate, two_mixed_geom_tau$estimate, three_mixed_geom_tau$estimate),
SE = c(poisson_tau$error, geometric_tau$error, two_mixed_geom_tau$error, three_mixed_geom_tau$error),
AICc = c(poisson_tau$AICc, geometric_tau$AICc, two_mixed_geom_tau$AICc, three_mixed_geom_tau$AICc),
GOF0 = c(poisson_tau$GOF0, geometric_tau$GOF0, two_mixed_geom_tau$GOF0, three_mixed_geom_tau$GOF0),
GOF5 = c(poisson_tau$GOF5, geometric_tau$GOF5, two_mixed_geom_tau$GOF5, three_mixed_geom_tau$GOF5),
LwrCB = c(poisson_tau$ci[1], geometric_tau$ci[1], two_mixed_geom_tau$ci[1], three_mixed_geom_tau$ci[1]),
UprCB = c(poisson_tau$ci[2], geometric_tau$ci[2], two_mixed_geom_tau$ci[2], three_mixed_geom_tau$ci[2]))
tau_tab <- tau_tab[!is.na(tau_tab$Est),]
return(tau_tab)
}, mc.cores = control$ncores)
stopCluster(cl)
} else{
all_results <- lapply(tau_range[1]:tau_range[2], function (tau) {
cat(".")
poisson_tau <- Poisson_model(input_data, cutoff = tau)
geometric_tau <- geometric_model(input_data, cutoff = tau)
two_mixed_geom_tau <- two_geometric_model(input_data, cutoff = tau)
three_mixed_geom_tau <- three_geometric_model(input_data, cutoff = tau)
tau_tab <- data.frame(tau = tau,
Model = c("Poisson", "SingleExp", "TwoMixedExp", "ThreeMixedExp"),
Est = c(poisson_tau$estimate, geometric_tau$estimate, two_mixed_geom_tau$estimate, three_mixed_geom_tau$estimate),
SE = c(poisson_tau$error, geometric_tau$error, two_mixed_geom_tau$error, three_mixed_geom_tau$error),
AICc = c(poisson_tau$AICc, geometric_tau$AICc, two_mixed_geom_tau$AICc, three_mixed_geom_tau$AICc),
GOF0 = c(poisson_tau$GOF0, geometric_tau$GOF0, two_mixed_geom_tau$GOF0, three_mixed_geom_tau$GOF0),
GOF5 = c(poisson_tau$GOF5, geometric_tau$GOF5, two_mixed_geom_tau$GOF5, three_mixed_geom_tau$GOF5),
LwrCB = c(poisson_tau$ci[1], geometric_tau$ci[1], two_mixed_geom_tau$ci[1], three_mixed_geom_tau$ci[1]),
UprCB = c(poisson_tau$ci[2], geometric_tau$ci[2], two_mixed_geom_tau$ci[2], three_mixed_geom_tau$ci[2]))
tau_tab <- tau_tab[!is.na(tau_tab$Est),]
return(tau_tab)
})
}
all_results_tib <- all_results[[1]]
for(i in 2:length(all_results)) {
all_results_tib <- rbind(all_results_tib, all_results[[i]])
}
all_results_tib <- all_results_tib[order(all_results_tib$Model, all_results_tib$tau),]
options(warn = 0)
return(all_results_tib)
}
geom_sim_once <- function(CC = 500, prob = 0.2) {
counts <- rgeom(CC, prob)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
return(list(Model = bmm$model,
est = bmm$est))
}
counts <- rgeom(CC, prob)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
debug(best_model(fc_tab))
fc_tab
aa <- all_parametric_model(fc_tab)
aa
input_data <- fc_tab
ii <- input_data$index
input_data <- convert(input_data)
all_results_tib <- all_parametric_model(input_data, parallel = parallel, tau_range = tau_range, control = control) %>%
.[complete.cases(.),]
tau_range <- NULL
all_results_tib <- all_parametric_model(input_data, parallel = parallel, tau_range = tau_range, control = control) %>%
.[complete.cases(.),]
parallel <- F
all_results_tib <- all_parametric_model(input_data, parallel = parallel, tau_range = tau_range, control = control) %>%
.[complete.cases(.),]
## Model selection, flag indicates how stringent the selection criteria are
flag <- 0
if (sum(all_results_tib$GOF5 > 0.01) > 0) {
if (sum(all_results_tib$GOF0 > 0.01) > 0) {
flag <- 2
} else {
flag <- 1
}
}
if (flag == 0) {
## all models are filtered out.
## In this scenario, we return 4 models with best AICc and GOF5
bestModels <- all_results_tib %>%
group_by(tau) %>%
dplyr::filter(AICc == min(AICc)) %>%
arrange(desc(GOF5)) %>%
.[1:4,]
output <- tibble(Description = c("Best Model 1", "Best Model 2", "Best Model 3", "Best Model 4")) %>%
bind_cols(bestModels)
} else if (flag == 1) {
## relaxed criteria
## Model 2A is the model with the greatest GOF0
bestModels <- all_results_tib %>%
dplyr::filter(GOF5 > 0.01) %>%
group_by(tau) %>%
dplyr::filter(AICc == min(AICc)) %>%
group_by()
bestModel1 <- tibble(Description = "Best Model 1", tau = NA, Model = NA, Est = NA, SE = NA, AICc = NA)
bestModel2A <- bestModels %>%
dplyr::filter(GOF0 == max(GOF0)) %>%
bind_cols(tibble(Description = c("Best Model 2A")),
.)
bestModel2B <- bestModels %>%
dplyr::filter(tau == max(tau))%>%
bind_cols(tibble(Description = c("Best Model 2B")),
.)
if (any(bestModels$tau <= 10)) {
bestModel2C <- bestModels %>%
dplyr::filter(tau <= 10) %>%
dplyr::filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 2C")),
.)
} else {
bestModel2C <- tibble(Description = "Best Model 2C", tau = NA, Model = NA, Est = NA, SE = NA, AICc = NA)
}
output <- bind_rows(bestModel1, bestModel2A, bestModel2B, bestModel2C)
} else if (flag == 2) {
## We adopt the most stringent criteria
bestModels <- all_results_tib %>%
dplyr::filter(GOF5 > 0.01) %>%
group_by(tau) %>%
dplyr::filter(AICc == min(AICc))
bestModel1 <- bestModels %>%
dplyr::filter(GOF0 > 0.01) %>%
dplyr::filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 1")),
.)
bestModel2A <- bestModels %>%
dplyr::filter(GOF0 == max(GOF0)) %>%
bind_cols(tibble(Description = c("Best Model 2A")),
.)
bestModel2B <- bestModels %>%
dplyr::filter(tau == max(tau))%>%
bind_cols(tibble(Description = c("Best Model 2B")),
.)
bestModel2C <- bestModels %>%
dplyr::filter(tau <= 10) %>%
dplyr::filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 2C")),
.)
output <- bind_rows(bestModel1, bestModel2A, bestModel2B, bestModel2C)
}
flag
if (sum(all_results_tib$GOF5 > 0.01) > 0) {
if (sum(all_results_tib$GOF0 > 0.01) > 0) {
flag <- 2
} else {
flag <- 1
}
}
bestModels <- all_results_tib %>%
dplyr::filter(GOF5 > 0.01) %>%
group_by(tau) %>%
dplyr::filter(AICc == min(AICc))
bestModels
bestModel1 <- bestModels %>%
dplyr::filter(GOF0 > 0.01) %>%
dplyr::filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 1")),
.)
bestModel1 <- bestModels %>%
dplyr::filter(GOF0 > 0.01)
bestModel1 <- bestModels %>%
dplyr::filter(GOF0 > 0.01) %>%
dplyr::filter(tau == max(tau))
bestModel1
bestModels <- all_results_tib %>%
dplyr::filter(GOF5 > 0.01) %>%
group_by(tau) %>%
dplyr::filter(AICc == min(AICc)) %>%
group_by()
bestModel1 <- bestModels %>%
dplyr::filter(GOF0 > 0.01) %>%
dplyr::filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 1")),
.)
bestModel2A <- bestModels %>%
dplyr::filter(GOF0 == max(GOF0)) %>%
bind_cols(tibble(Description = c("Best Model 2A")),
.)
bestModel2B <- bestModels %>%
dplyr::filter(tau == max(tau))%>%
bind_cols(tibble(Description = c("Best Model 2B")),
.)
bestModel2C <- bestModels %>%
dplyr::filter(tau <= 10) %>%
dplyr::filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 2C")),
.)
bestModels
bestModels <- all_results_tib %>%
dplyr::filter(GOF5 > 0.01) %>%
group_by(tau) %>%
dplyr::filter(AICc == min(AICc)) %>%
group_by()
bestModels
bestModel1 <- bestModels %>%
dplyr::filter(GOF0 > 0.01) %>%
dplyr::filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 1")),
.)
bestModel1
bestModel2A <- bestModels %>%
dplyr::filter(GOF0 == max(GOF0)) %>%
bind_cols(tibble(Description = c("Best Model 2A")),
.)
bestModel2B <- bestModels %>%
dplyr::filter(tau == max(tau))%>%
bind_cols(tibble(Description = c("Best Model 2B")),
.)
bestModel2C <- bestModels %>%
dplyr::filter(tau <= 10) %>%
dplyr::filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 2C")),
.)
bestModel2C <- bestModels %>%
dplyr::filter(tau <= 10)
bestModel2C
bestModel2C <- bestModels %>%
dplyr::filter(tau <= 10) %>%
dplyr::filter(tau == max(tau))
bestModel2C <- bestModels %>%
dplyr::filter(tau <= 10) %>%
dplyr::filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 2C")),
.)
min(bestModels$tau)
install()
library(devtools)
document()
install()
library(CatchAll)
counts <- rgeom(CC, prob)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
bmm
table(counts)
poisson_sim_once <- function(CC = 500, lambda = 3) {
counts <- rpois(CC, lambda)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
return(list(Model = bmm$model,
obs = sum(counts > 0),
est = bmm$est))
}
geom_sim_once <- function(CC = 500, prob = 0.2) {
counts <- rgeom(CC, prob)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
return(list(Model = bmm$model,
obs = sum(counts > 0),
est = bmm$est))
}
dd <- replicate(3, geom_sim_once)
dd <- replicate(3, geom_sim_once())
dd
seq(100, 1000, by = 100)
setwd("P:/git/CatchAll/misc")
setwd("P:/git/CatchAll/misc")
library(CatchAll)
poisson_sim_once <- function(CC = 500, lambda = 3) {
counts <- rpois(CC, lambda)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
return(list(Model = bmm$model,
obs = sum(counts > 0),
est = bmm$est))
}
geom_sim_once <- function(CC = 500, prob = 0.2) {
counts <- rgeom(CC, prob)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
return(list(Model = bmm$model,
obs = sum(counts > 0),
est = bmm$est))
}
for(CC in seq(100, 1000, by = 100)) {
pois_results <- replicate(100, poisson_sim_once(CC = CC, lambda = 3))
geom_results <- replicate(100, poisson_sim_once(CC = CC, prob = 0.2))
save(pois_results, file = paste("./output/pois_C_", CC, ".RData", sep = ""))
save(geom_results, file = paste("./output/geom_C_", CC, ".RData", sep = ""))
}
poisson_sim_once(CC = CC, lambda = 3)
rpois(100, 3)
counts(100, 3)
CC <- 100
counts <- rpois(CC, lambda)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
fc_tab
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
fc_tab
bmm <- best_model(fc_tab)
all_parametric_model(fc_tab)
input_data <- fc_tab
options(warn = -1)
ii <- input_data$index
input_data <- convert(input_data)
all_results_tib <- all_parametric_model(input_data, parallel = parallel, tau_range = tau_range, control = control) %>%
.[complete.cases(.),]
all_results_tib
## Model selection, flag indicates how stringent the selection criteria are
flag <- 0
if (sum(all_results_tib$GOF5 > 0.01) > 0) {
if (sum(all_results_tib$GOF0 > 0.01) > 0) {
flag <- 2
} else {
flag <- 1
}
}
flag
bestModels <- all_results_tib %>%
dplyr::filter(GOF5 > 0.01) %>%
group_by(tau) %>%
dplyr::filter(AICc == min(AICc)) %>%
group_by()
bestModels
bestModel1 <- bestModels %>%
dplyr::filter(GOF0 > 0.01) %>%
dplyr::filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 1")),
.)
bestModel2A <- bestModels %>%
dplyr::filter(GOF0 == max(GOF0)) %>%
bind_cols(tibble(Description = c("Best Model 2A")),
.)
bestModels %>%
dplyr::filter(GOF0 == max(GOF0))
bestModels %>%
dplyr::filter(GOF0 == max(GOF0)) %>%
dplyr::last()
bestModel2A <- bestModels %>%
dplyr::filter(GOF0 == max(GOF0)) %>%
dplyr::filter(tau == max(tau))
bestModels %>%
dplyr::filter(GOF0 == max(GOF0)) %>%
dplyr::filter(tau == max(tau))
bestModel2A <- bestModels %>%
dplyr::filter(GOF0 == max(GOF0)) %>%
dplyr::filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 2A")),
.)
bestModel2A
bestModel2A <- bestModels %>%
dplyr::filter(GOF0 == max(GOF0)) %>%
dplyr::filter(tau == max(tau)) %>%
bind_cols(tibble(Description = c("Best Model 2A")),
.)
bestModel2A
install()
setwd("P:/git/CatchAll/misc")
library(CatchAll)
poisson_sim_once <- function(CC = 500, lambda = 3) {
counts <- rpois(CC, lambda)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
return(list(Model = bmm$model,
obs = sum(counts > 0),
est = bmm$est))
}
geom_sim_once <- function(CC = 500, prob = 0.2) {
counts <- rgeom(CC, prob)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
return(list(Model = bmm$model,
obs = sum(counts > 0),
est = bmm$est))
}
for(CC in seq(100, 1000, by = 100)) {
pois_results <- replicate(100, poisson_sim_once(CC = CC, lambda = 3))
geom_results <- replicate(100, poisson_sim_once(CC = CC, prob = 0.2))
save(pois_results, file = paste("./output/pois_C_", CC, ".RData", sep = ""))
save(geom_results, file = paste("./output/geom_C_", CC, ".RData", sep = ""))
}
setwd("P:/git/CatchAll/misc")
library(CatchAll)
poisson_sim_once <- function(CC = 500, lambda = 3) {
counts <- rpois(CC, lambda)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
return(list(Model = bmm$model,
obs = sum(counts > 0),
est = bmm$est))
}
geom_sim_once <- function(CC = 500, prob = 0.2) {
counts <- rgeom(CC, prob)
## generate frequency count table
fc_tab <- as.data.frame(table(counts))
names(fc_tab) <- c("index", "frequency")
fc_tab$index <- as.numeric(fc_tab$index)
fc_tab$frequency <- as.numeric(fc_tab$frequency)
fc_tab <- fc_tab[fc_tab$index > 0, ]
bmm <- best_model(fc_tab)
return(list(Model = bmm$model,
obs = sum(counts > 0),
est = bmm$est))
}
for(CC in seq(100, 1000, by = 100)) {
pois_results <- replicate(100, poisson_sim_once(CC = CC, lambda = 3))
geom_results <- replicate(100, geom_sim_once(CC = CC, prob = 0.2))
save(pois_results, file = paste("./output/pois_C_", CC, ".RData", sep = ""))
save(geom_results, file = paste("./output/geom_C_", CC, ".RData", sep = ""))
}
